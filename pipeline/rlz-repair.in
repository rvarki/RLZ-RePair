#!/usr/bin/env python3
import os.path
import argparse
import subprocess

Description = """
 ____  _     _____     ____      ____       _      
|  _ \| |   |__  /    |  _ \ ___|  _ \ __ _(_)_ __ 
| |_) | |     / /_____| |_) / _ \ |_) / _` | | '__|
|  _ <| |___ / /|_____|  _ <  __/  __/ (_| | | |   
|_| \_\_____/____|    |_| \_\___|_|   \__,_|_|_|             
                ver 1.0.0

Compute the RLZ + RePair compression of a target sequence file 
using a reference file.
"""

version = "@VERSION@"
dirname = os.path.dirname(os.path.abspath(__file__))

rlz_exe = "@RLZ@"
repair_exe = "@REPAIR@"

def execute_command(command):
    result = subprocess.run(command, shell=True, capture_output=False, text=True)

def runRLZ(args):
    command = ""
    command += rlz_exe + " " + "-r " + args.ref + " " + "-s " + args.seq + " " + "-t " + str(args.threads) + " " + "-v " + str(args.verbosity)
    if (args.bit):
        command += "--bit "
    
    execute_command(command)

def runRePair(args):
    command = ""
    command += repair_exe + " " + "-r " + args.ref + " " + "-p " + args.seq + ".rlz" + " " + "-v " + str(args.verbosity)
    
    execute_command(command)

def main():
    parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-r', '--ref', help = "The reference file to be used for compression", type = str, required = True)
    parser.add_argument('-s', '--seq', help = "The sequence file to compress", type = str, required = True)
    parser.add_argument('-b', '--bit', help = "Do the RLZ compression at bit level", action='store_true')
    parser.add_argument('-t', '--threads', help = "Number of threads", type = int, default = 1)
    parser.add_argument('-d', '--decompress', help= "Decompress into the original file", action='store_true')
    parser.add_argument('-v', '--verbosity', help='Set verbosity level (0 = none, 1 = basic, 2 = detailed)', type=int, choices=[0, 1, 2], default=0)
    parser.add_argument('--log-file', help="Log filename prefix.", type = str)
    args = parser.parse_args()
    print("############ STARTING RUNNING RLZ ############")
    runRLZ(args)
    print("############ FINISHED RUNNING RLZ ############")
    print("############ STARING RUNNING REPAIR ############")
    runRePair(args)
    print("############ FINISHED RUNNING REPAIR ############")

if __name__ == '__main__':
    main()
