#!/usr/bin/env python3

#
# RLZ-RePair - RePair compression using RLZ parse
# Copyright (C) 2025-current Rahul Varki
# Licensed under the GNU General Public License v3 or later.
# See the LICENSE file or <https://www.gnu.org/licenses/> for details.
#

import os
import os.path
import argparse
import subprocess

Description = """
 ____  _     _____     ____      ____       _      
|  _ \| |   |__  /    |  _ \ ___|  _ \ __ _(_)_ __ 
| |_) | |     / /_____| |_) / _ \ |_) / _` | | '__|
|  _ <| |___ / /|_____|  _ <  __/  __/ (_| | | |   
|_| \_\_____/____|    |_| \_\___|_|   \__,_|_|_|             
                ver 1.0.0

Compute the RLZ + RePair compression of a target sequence file 
using a reference file.
"""

version = "@VERSION@"
dirname = os.path.dirname(os.path.abspath(__file__))

rlz_exe = "@RLZ@"
repair_exe = "@REPAIR@"
despair_exe = "@DESPAIR@"
standard_repair_exe = "@STANDARD_REPAIR@"

def execute_command(args, command):
    if (args.log_file is not None):
        with open(args.log_file, 'a') as log_file:
            result = subprocess.run(command, shell=True, capture_output=False, text=True, stdout=log_file, stderr=log_file) 
    else:
        result = subprocess.run(command, shell=True, capture_output=False, text=True)

def runRLZ(args):
    command = ""
    command += rlz_exe + " " + "-r " + args.ref_file + " " + "-s " + args.seq_file + " " + "-t " + str(args.threads) + " " + "-v " + str(args.verbosity)
    # if (args.bit):
    #     command += "--bit "
    
    execute_command(args, command)

def runRePair(args):
    command = ""
    command += repair_exe + " " + "-r " + args.ref_file + " " + "-p " + args.seq_file + ".rlz" + " " + "-m " + str(args.min) + " " + "-i " + str(args.iter) + " " + "-v " + str(args.verbosity)
    
    execute_command(args, command)

def runGonzaloRePair(args):
    command = ""
    command += standard_repair_exe + " " + args.seq_file + ".Ctmp" + " " + str(args.mem)

    execute_command(args, command)

def runDesPair(args):
    command = ""
    command += despair_exe + " " + args.compress_prefix

    execute_command(args, command)

def non_negative_or_minus_one(value):
    ivalue = int(value)
    if ivalue < -1:
        raise argparse.ArgumentTypeError(f"{value} is invalid. Must be a non-negative integer.")
    return ivalue

def main():
    parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)

    compression_group = parser.add_argument_group("Compression Options")
    compression_group.add_argument('-r', '--ref', help = "The reference file to be used for compression.", type = str, dest="ref_file")
    compression_group.add_argument('-s', '--seq', help = "The sequence file to compress.", type = str, dest="seq_file")
    #compression_group.add_argument('-b', '--bit', help = "Do the RLZ compression at bit level", action='store_true')
    compression_group.add_argument('-m', '--min', help = "The minimum phrase length threshold for an RLZ phrase to be stored as a non-explicit phrase.", type = non_negative_or_minus_one, default = -1)
    compression_group.add_argument('-i', '--iter', help = "The number of RePair iterations to be performed before early termination.", type = non_negative_or_minus_one, default = -1)
    compression_group.add_argument('-t', '--threads', help = "Number of threads for RLZ section (default = 1).", type = int, default = 1)
    compression_group.add_argument('-v', '--verbosity', help='Set verbosity level (0 = none, 1 = basic, 2 = detailed).', type=int, choices=[0, 1, 2], default=0)

    gonzalo_group = parser.add_argument_group("Gonzalo's RePair Options")
    gonzalo_group.add_argument('--standard', help="Runs Gonzalo's standard RePair on the RLZ-RePair compressed string. Requires the -i option.", action='store_true')
    gonzalo_group.add_argument('--mem', help="Maximum memory available to Gonzalo's standard RePair (MB). Must be used with --standard flag.", type = int)

    decompression_group = parser.add_argument_group("Decompression Options")
    decompression_group.add_argument('-d', '--decompress', help = "Prefix of the compressed files to decompress.", type = str, dest="compress_prefix")

    parser.add_argument('--log', help="Log filename.", type = str, dest="log_file")

    args = parser.parse_args()

    if (args.compress_prefix is not None):
        print("############ STARTING DECOMPRESSION ############")
        runDesPair(args)
        print("############ FINISHED DECOMPRESSION ############")
    else:
        print("############ STARTING RUNNING RLZ ############")
        if (args.ref_file is None or args.seq_file is None):
            print("Error: A file needs to be specified for both -r and -s to run RLZ-RePair")
            parser.print_help()
            sys.exit(1)
        else:
            runRLZ(args)
        print("############ FINISHED RUNNING RLZ ############")
        print("############ STARING RUNNING REPAIR ############")
        runRePair(args)
        print("############ FINISHED RUNNING REPAIR ############")
        if (args.standard and args.mem is not None):
            print("############ STARTING Gonzalo's REPAIR ############")
            temp_file = args.seq_file + ".Ctmp"
            os.rename(args.seq_file + ".C", temp_file)
            runGonzaloRePair(args)
            if os.path.exists(temp_file):
                os.remove(temp_file)
                print(f"Removed temp file: {temp_file}")
            print("############ FINISHED Gonzalo's REPAIR ############")
        elif (args.standard and args.mem is None):
            print("Error: --mem must be specified when using --standard.")
            parser.print_help()
            sys.exit(1)

if __name__ == '__main__':
    main()
